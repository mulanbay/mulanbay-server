#系统配置
#系统节点号
system.nodeId=lh-01
#handler异步处理的延迟时间（秒）
system.syncDelay=5
#图形验证码类型
system.captchaType=math
#命名空间，主要是缓存使用
system.namespace=pms
#是否在系统启动时就加载word2Vector模型（文件大小700M）
system.word2Vector.model.init=false
#NLP匹配时的最低匹配度，低于这个数不匹配
system.word2Vector.minMatchDegree=0.2
#NLP匹配时的最高匹配度，高于这个数不再往下匹配
system.word2Vector.maxMatchDegree=0.9
#词云的图片目录
system.wordCloud.picPath=${SYS_WORDCLOUD_PIC_PATH:/uploads/wordcloud}
#用户头像地址
user.avatar.path=/uploads/avatar
#图片地址前缀
picture.baseUrl=${PICTURE_BASEURL:"http://localhost:99/avatar"}
#移动端基础路径
system.mobile.baseUrl=${SYS_MOBILE_BASEURL:"http://localhost:94"}

# 防止XSS攻击
# 过滤开关
xss.enabled=true
# 排除链接（多个用逗号分隔）,配置的sql字段带有<,>符号
xss.excludes=/notifyConfig/*,/planConfig/*,/reportConfig/*,/userBehaviorConfig/*,/qaConfig/*
# 匹配链接（多个用逗号分隔）
xss.urlPatterns=/*

#调度配置
#是否启动
schedule.enable=${SCHEDULE_ENABLE:true}
#定时检查周期(秒数)
schedule.checkInterval=60
# 是否支持分布式任务
schedule.supportDistri=${SCHEDULE_SUPPORT_DISTRI:false}
# 分布式任务的最小执行秒数
schedule.distriTaskMinCost=5


# 线程池核心线程大小
system.threadPool.corePoolSize=20
# 线程池queue大小
system.threadPool.queueSize=1024
# 线程池maximumPoolSize大小
system.threadPool.maximumPoolSize=200
# 统计图里面的子标题是否需要总的统计值
system.chart.subTitle.hasTotal=true
# 购买记录统计中是否启用商品类型里的可统计字段（如果启用了，则增加消费记录统计的复杂度）
system.buyRecord.stat.useStatable=${SYS_BUYRECORD_STAT_USESTATE:true}
#是否需要操作日志
system.need.operationLog=true
#是否需要系统日志
system.need.systemLog=true
# 系统版本
system.version=3.0
# 权限相关配置是否走内存缓存(内存模式可以增加并发响应，但是权限配置修改后需要重启服务器)
system.configCache.byMemoryCache=true
# 分页每页最大数
system.pageSearch.maxPageSize=${SYS_PAGESEARCH_MAXPAGESIZE:100}
# 首页系统提醒统计缓存时间，如果小于等于0则说明不需要缓存
system.notifyStat.queryExpireSeconds=300
#根据模板新增的增加积分数（单个）
reward.createByTemplate.perPoints=${REWORD_CREATE_BY_TEMPLATE_PERPOINTS:10}

#消费相关
#消费记录的缓存队列的过期时间
buyRecord.cacheQueue.expireDays=10
#消费记录的缓存队列的大小
buyRecord.cacheQueue.size=100
#NLP匹配时的最低匹配度，低于这个数认为没有匹配到
buyRecord.similarity.minMatchDegree=0.3
#NLP匹配时的最高匹配度，高于这个数不再往下匹配
buyRecord.similarity.maxMatchDegree=0.9
#商品类型的匹配列表过期时间(秒)
goodsType.matchList.expireTime=300

# hibernate相关
hibernate.dialect=org.hibernate.dialect.MySQLDialect
hibernate.show_sql=false
# 持久层列表查询缓存
# 列表数据是否缓存
persistent.page.list.cache = false
# 总记录值是否缓存
persistent.page.total.cache = false
# 需要缓存的bean，多个以英文逗号分隔，如果是全部则直接用* 表示
persistent.page.cacheBeans = SystemLog

# 数据库相关
# jdbc_config   datasource
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc\:mysql\://${MYSQL_HOST:127.0.0.1}\:${MYSQL_PORT:3306}/${MYSQL_DATABASE:mulanbay}?useUnicode=true&characterEncoding=utf8&autoReconnect=true
spring.datasource.username=${MYSQL_USER:root}
spring.datasource.password=${MYSQL_PWD:root}
# Hikari will use the above plus the following to setup connection pooling
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.minimum-idle=8
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.idle-timeout=30000
spring.datasource.hikari.pool-name=DatebookHikariCP
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.connection-test-query=SELECT 1

#安全相关
# 登录是否需要持久
security.login.persist=true
# 最大失败次数
security.login.maxFail=${SECURITY_LOGIN_MAXFAIL:5}
#MD5密码的盐值
security.password.salt=${SECURITY_PWD_SALT:abc123456}
# token配置
# 令牌取值位置:header / cookie (适配原来的jquery版本)
security.token.way=header
# 令牌自定义标识
security.token.header=Authorization
# 令牌密钥
security.token.secret=${SECURITY_TOKEN_SECRET:abcdefghijklmnopqrstuvwxyz}
# 令牌有效期（默认30分钟）
security.token.expireTime=${SECURITY_TOKEN_EXPIRE_TIME:1800}
# 验证令牌有效期（默认20分钟）
security.token.verifyTime=${SECURITY_TOKEN_VERIFY_TIME:1200}

# 邮件发送配置
mail.username=${MAIL_USERNAME:""}
# qq邮箱采用授权码发送，非邮箱密码
mail.password=${MAIL_PWD:""}
mail.mailServerHost=${MAIL_SERVER_HOST:""}
mail.mailServerPort=${MAIL_SERVER_PORT:""}

# redis 配置
redis.server.ip=${REDIS_SERVER_IP:127.0.0.1}
redis.server.port=${REDIS_SERVER_PORT:6379}
redis.server.db=${REDIS_SERVER_DB:10}
redis.server.password=${REDIS_SERVER_PWD:}
redis.default.expiration=${REDIS_DEFAULT_EXPIRATION:300}

# 微信相关
wx.appId=${WX_APPID:}
wx.secret=${WX_SECRET:}
wx.token=${WX_TOKEN:}
# 微信消息发送模板编号
wx.userMessageTemplateId=${WX_USER_MESSAGE_TEMPLATE_ID:}
wx.accessAuthRedirectUrl=${WX_ACCESS_AUTH_REDIRECT_URL:}
#公众号地址
wx.oaUrl=${WX_OAURL:}
#公众号二维码本地地址
wx.oa.qrUrl=${WX_OA_QRURL:/uploads/wechatqr.jpg}

# 默认的消息提醒发送时间
notify.message.expectSendTime=${NOTIFY_MESSAGE_EXPECT_SEND_TIME:"09:00"}
# 是否要通知表单验证类的消息提醒
notify.validateError=${NOTIFY_VALIDATE_ERROR:false}
# 表单验证类最小错误代码
notify.validateError.minErrorCode=10000000
#消息最大发送失败次数
notify.message.send.maxFail=${NOTIFY_MESSAGE_SEND_MAXFAIL:3}
#消息发送是否需要锁定
notify.message.send.lock=${NOTIFY_MESSAGE_SEND_LOCK:false}

# 股票相关
shares.withCache=${SHARES_WITH_CACHE:true}
shares.cacheSeconds=${SHARES_CACHE_SECONDS:5}
# 股票价格监控的调度ID（根据实际来写）
shares.monitor.taskTriggerId=${SHARES_MONITOR_TASKTRIGGERID:30}
# 股票统计的调度ID（根据实际来写）
shares.stat.taskTriggerId=${SHARES_STAT_TASKTRIGGERID:31}

# 时间的json格式
spring.jackson.date-format=${DATE_FORMAT:"yyyy-MM-dd HH:mm:ss"}
# 解决spring json解析相差8个小时的时区问题（针对POST方法，且时间为yyyy-MM-dd模式）
spring.jackson.time-zone=${TIMEZONE:GMT+8}
#加载本地配置文件
spring.profiles.include=local
#启动项目名
server.servlet.context-path=/api
#配置tomcat端口，针对内置的tomcat
server.port=8080
#绑定ip地址,只能由设置的地址进入访问
server.address=0.0.0.0
#tomcat 配置
server.tomcat.threads.max=500
server.tomcat.threads.min-spare=100
